// standard path for graphql (Node)
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  schemas  = ["public", "airfoil"]
}

// standard path for graphql (Node)
generator typegraphql {
  provider = "typegraphql-prisma"
  previewFeatures = ["multiSchema"]
  schemas  = ["public", "airfoil"]
}

generator drizzle {
  provider = "drizzle-prisma-generator"
  previewFeatures = ["multiSchema"]
  output   = "./indexers/drizzle" // Where to put generated Drizle tables
  schemas  = ["public", "airfoil"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONNECTION_STRING")
  schemas  = ["public", "airfoil"]
}

model investment_flows {
  block_number Int
  tx_index      Int    @default(0)
  event_index   Int    @default(0)
  tx_hash       String

  sender     String // caller of tx
  receiver   String // owner on deposit, could be anyone on withdraw
  owner      String // the one who received or sent the asset
  amount     String
  shares     String
  asset      String
  contract   String
  epoch      Int     @default(0)
  request_id Int     @default(0)
  type       String // deposit | withdraw
  timestamp  Int
  cursor     BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index], name: "event_id")

  @@schema("public")
}

model harvests {
  block_number Int
  txIndex      Int    @default(0)
  eventIndex   Int    @default(0)
  txHash       String

  user      String
  contract  String
  amount    String
  price     Float   @default(0) // the indexer will set this 0, but when reading, it will be set to the price at the time of the harvest
  timestamp Int
  cursor    BigInt? @map("_cursor")

  @@unique([block_number, txIndex, eventIndex], name: "event_id")

  @@schema("public")
}

model transfers {
  block_number Int
  txIndex      Int    @default(0)
  eventIndex   Int    @default(0)
  txHash       String

  contract String
  from     String
  receiver String
  amount   String

  timestamp Int
  cursor    BigInt? @map("_cursor")

  @@unique([block_number, txIndex, eventIndex], name: "event_id")

  @@schema("public")
}

model position_fees_collected {
  block_number Int
  tx_index      Int    @default(0)
  event_index   Int    @default(0)
  tx_hash       String

  token0       String
  token1       String
  amount0      String
  amount1      String
  
  vault_address String

  timestamp Int
  cursor    BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index], name: "event_id")

  @@schema("public")
}

model position_updated {
  block_number Int
  txIndex      Int    @default(0)
  eventIndex   Int    @default(0)
  txHash       String

  locker          String
  token0          String
  token1          String
  fee             String
  tick_spacing    String
  extension       String
  salt            String
  lower_bound     String
  upper_bound     String
  liquidity_delta String
  amount0         String
  amount1         String

  vault_address   String
  user_address    String

  timestamp Int
  cursor    BigInt? @map("_cursor")

  @@unique([block_number, txIndex, eventIndex], name: "event_id")

  @@schema("public")
}

model dnmm_user_actions {
  block_number Int
  txIndex      Int    @default(0)
  eventIndex   Int    @default(0)
  txHash       String

  sender                         String
  receiver                       String
  owner                          String
  assets                         String
  position_acc1_supply_shares    String
  position_acc1_borrow_shares    String
  position_acc2_supply_shares    String
  position_acc2_borrow_shares    String
  contract                       String
  type                           String

  timestamp Int
  cursor    BigInt? @map("_cursor")

  @@unique([block_number, txIndex, eventIndex], name: "event_id")

  @@schema("public")
}